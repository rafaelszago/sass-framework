@use 'sass:map' as *;
@use 'sass:math' as *;
@use 'sass:meta' as *;

@function calc-grid-width($grid) {
  $margin: map-get($grid, 'margin');
  $breakpoint: map-get($grid, 'breakpoint');

  @return 100% - (div($margin * 2, $breakpoint) * 100%);
}

@function calc-gutter($grid) {
  $gutter: map-get($grid, 'gutter');
  $container: map-get($grid, 'container');
  $margin: map-get($grid, 'margin');

  $value: 1px;

  @if (type-of($container) == number) {
    $value: ($container - ($margin * 2));
  } @else {
    $value: (1px - ($margin * 2));
  }

  @return div($gutter, $value) * 100%;
}

@function calc-col-width($i, $columns) {
  @return div(100%, $columns) * $i;
}

@mixin col-props($i, $columns, $gutter) {
  box-sizing: border-box;
  flex-basis: calc-col-width($i, $columns);
  max-width: calc-col-width($i, $columns);
  padding-left: div($gutter, 2);
  padding-right: div($gutter, 2);
}

@mixin make-columns($grid) {
  $gutter: calc-gutter($grid);
  $prefix: map-get($grid, 'prefix');
  $columns: map-get($grid, 'columns');

  @for $i from 1 through $columns {
    @if ($prefix) {
      &-#{$prefix}-#{$i} {
        @include col-props($i, $columns, $gutter);
      }
      &-#{$prefix}-offset-#{$i} {
        margin-left: calc-col-width($i, $columns);
      }
    } @else {
      &-#{$i} {
        @include col-props($i, $columns, $gutter);
      }
      &-offset-#{$i} {
        margin-left: calc-col-width($i, $columns);
      }
    }
  }
}

@mixin make-breakpoint($breakpoint) {
  $has-min: has-key($breakpoint, 'min');
  $has-max: has-key($breakpoint, 'max');

  @if ($has-min & $has-max) {
    $max-value: map-get($breakpoint, 'max');
    $min-value: map-get($breakpoint, 'min');
    @media (min-width: $min-value) and (max-width: $max-value) {
      @content;
    }
  }
  @if $has-max {
    $value: map-get($breakpoint, 'max');
    @media (max-width: $value) {
      @content;
    }
  }
  @if $has-min {
    $value: map-get($breakpoint, 'min');
    @media (min-width: $value) {
      @content;
    }
  }
}
